package hr.fer.zemris.java.custom.scripting.parser;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.annotation.Documented;
import java.nio.charset.StandardCharsets;

import hr.fer.zemris.java.custom.scripting.elems.*;
import hr.fer.zemris.java.custom.scripting.lexer.SmartScriptLexerTest;
import hr.fer.zemris.java.custom.scripting.nodes.*;
import hr.fer.zemris.java.custom.scripting.parser.*;
import org.junit.Test;

/**
 * Most tests are examined by using method equals in {@link DocumentNode} class.
 * Method equals is tested in {@link DocumentNodeTest} class. Tests are using
 * text files from src/test/resources folder in this project as input. A lot of
 * cases are tested in {@link SmartScriptLexerTest} such as escape sequences so
 * they aren't here.
 * 
 * @author Mihael JaiÄ‡
 *
 */

public class SmartScriptParserTest {

	@Test(expected = SmartScriptParserException.class)
	public void testNull() {
		SmartScriptParser parser = new SmartScriptParser(null);
	}

	@Test(expected = SmartScriptParserException.class)
	public void testEmptyDocument() {
		SmartScriptParser parser = new SmartScriptParser(loader("empty document.txt"));
	}

	@Test
	public void testExample1() {
		SmartScriptParser parser = new SmartScriptParser(loader("document1.txt"));

		DocumentNode document1 = parser.getDocumentNode();
		DocumentNode document2 = new DocumentNode();

		document2.addChildNode(new TextNode("This is sample text.\r\n"));

		ForLoopNode forLoopNode1 = new ForLoopNode(new ElementVariable("i"), new ElementConstantInteger(1),
				new ElementConstantInteger(10), new ElementConstantInteger(1));

		forLoopNode1.addChildNode(new TextNode("\r\n This is "));
		forLoopNode1.addChildNode(new EchoNode(new Element[] { new ElementVariable("i") }));
		forLoopNode1.addChildNode(new TextNode("-th time this message is generated.\r\n"));

		document2.addChildNode(forLoopNode1);
		document2.addChildNode(new TextNode("\r\n"));

		ForLoopNode forLoopNode2 = new ForLoopNode(new ElementVariable("i"), new ElementConstantInteger(0),
				new ElementConstantInteger(10), new ElementConstantInteger(2));

		forLoopNode2.addChildNode(new TextNode("\r\n sin("));
		forLoopNode2.addChildNode(new EchoNode(new Element[] { new ElementVariable("i") }));
		forLoopNode2.addChildNode(new TextNode("^2) = "));
		forLoopNode2.addChildNode(new EchoNode(
				new Element[] { new ElementVariable("i"), new ElementVariable("i"), new ElementOperator("*"),
						new ElementFunction("sin"), new ElementString("0.000"), new ElementFunction("decfmt") }));
		forLoopNode2.addChildNode(new TextNode("\r\n"));

		document2.addChildNode(forLoopNode2);

		// DocumentNode generated by parser should match this document2.
		assertTrue(document1.equals(document2));
	}

	@Test
	public void testExample2() {
		SmartScriptParser parser = new SmartScriptParser(loader("document2.txt"));

		DocumentNode document1 = parser.getDocumentNode();
		DocumentNode document2 = new DocumentNode();

		document2.addChildNode(new TextNode("Example {$=1$}. Now actually write one "));
		document2.addChildNode(new EchoNode(new Element[] { new ElementConstantInteger(1) }));

		assertTrue(document1.equals(document2));
	}

	@Test
	public void testExample3() {
		SmartScriptParser parser = new SmartScriptParser(loader("document3.txt"));

		DocumentNode document1 = parser.getDocumentNode();
		DocumentNode document2 = new DocumentNode();

		document2.addChildNode(new TextNode("A tag follows "));
		document2.addChildNode(new EchoNode(new Element[] { new ElementString("Joe \"Long\" Smith") }));
		document2.addChildNode(new TextNode("."));

		assertTrue(document1.equals(document2));
	}

	@Test(expected = SmartScriptParserException.class)
	public void testNoEndTag() {
		// For loops have to be closed with end tag. So this will throw
		// exception.
		SmartScriptParser parser = new SmartScriptParser(loader("document4.txt"));
	}

	@Test(expected = SmartScriptParserException.class)
	public void testInvalidForLoopTerminate() {
		SmartScriptParser parser = new SmartScriptParser(loader("document9.txt"));
	}

	@Test(expected = SmartScriptParserException.class)
	public void testInvalidForLoop() {
		SmartScriptParser parser = new SmartScriptParser(loader("document5.txt"));
	}

	@Test(expected = SmartScriptParserException.class)
	public void testInvalidForLoop2() {
		SmartScriptParser parser = new SmartScriptParser(loader("document6.txt"));
	}

	@Test
	public void testValidForLoop() {
		SmartScriptParser parser = new SmartScriptParser(loader("document7.txt"));

		DocumentNode document1 = parser.getDocumentNode();
		DocumentNode document2 = new DocumentNode();

		ForLoopNode forLoop = new ForLoopNode(new ElementVariable("sco_re"), new ElementString("-1"),
				new ElementConstantInteger(10), new ElementString("1"));

		forLoop.addChildNode(new TextNode("\r\n"));

		document2.addChildNode(forLoop);

		assertTrue(document1.equals(document2));
	}

	@Test
	public void testMultipleForLoop() {
		SmartScriptParser parser = new SmartScriptParser(loader("document8.txt"));

		DocumentNode document1 = parser.getDocumentNode();
		DocumentNode document2 = new DocumentNode();

		ForLoopNode forLoop1 = new ForLoopNode(new ElementVariable("i"), new ElementConstantInteger(0),
				new ElementConstantInteger(10), new ElementConstantInteger(1));
		ForLoopNode forLoop2 = new ForLoopNode(new ElementVariable("j"), new ElementConstantInteger(0),
				new ElementConstantInteger(10), new ElementConstantInteger(1));
		ForLoopNode forLoop3 = new ForLoopNode(new ElementVariable("k"), new ElementConstantInteger(0),
				new ElementConstantInteger(10), new ElementConstantInteger(1));

		forLoop3.addChildNode(new TextNode("\r\n\t\t"));

		forLoop2.addChildNode(new TextNode("\r\n\t\t"));
		forLoop2.addChildNode(forLoop3);
		forLoop2.addChildNode(new TextNode("\r\n\t"));

		forLoop1.addChildNode(new TextNode("\r\n\t"));
		forLoop1.addChildNode(forLoop2);
		forLoop1.addChildNode(new TextNode("\r\n"));

		document2.addChildNode(forLoop1);

		assertTrue(document1.equals(document2));
	}

	private String loader(String filename) {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		try (java.io.InputStream is = this.getClass().getClassLoader().getResourceAsStream(filename)) {
			byte[] buffer = new byte[1024];
			while (true) {
				int read = is.read(buffer);
				if (read < 1)
					break;
				bos.write(buffer, 0, read);
			}
			return new String(bos.toByteArray(), StandardCharsets.UTF_8);
		} catch (IOException ex) {
			return null;
		}
	}

}
