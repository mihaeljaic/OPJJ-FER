package hr.fer.zemris.bf.lexer;

/**
 * Token that is generated by {@link Lexer} during lexical analysis.
 * 
 * @author Mihael JaiÄ‡
 *
 */

public class Token {
	/**
	 * Token type.
	 */
	private TokenType tokenType;
	/**
	 * Token value.
	 */
	private Object tokenValue;

	/**
	 * Sets type and value.
	 * 
	 * @param tokenType
	 *            Token type.
	 * @param tokenValue
	 *            Token value.
	 * @throws IllegalArgumentException
	 *             If type is null.
	 */

	public Token(TokenType tokenType, Object tokenValue) throws IllegalArgumentException {
		super();
		if (tokenType == null) {
			throw new IllegalArgumentException("Type can't be null.");
		}

		this.tokenType = tokenType;
		this.tokenValue = tokenValue;
	}

	/**
	 * Gets token type.
	 * 
	 * @return Token type.
	 */

	public TokenType getTokenType() {
		return tokenType;
	}

	/**
	 * Gets token value.
	 * 
	 * @return Token value.
	 */

	public Object getTokenValue() {
		return tokenValue;
	}

	@Override
	public String toString() {
		if (tokenValue == null) {
			return String.format("Type: %s, Value: null", tokenType);
		}

		return String.format("Type: %s, Value: %s, Value is instance of: %s", tokenType, tokenValue,
				tokenValue.getClass().getName());
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((tokenType == null) ? 0 : tokenType.hashCode());
		result = prime * result + ((tokenValue == null) ? 0 : tokenValue.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Token other = (Token) obj;
		if (tokenType != other.tokenType)
			return false;
		if (tokenValue == null) {
			if (other.tokenValue != null)
				return false;
		} else if (!tokenValue.equals(other.tokenValue))
			return false;
		return true;
	}

}
